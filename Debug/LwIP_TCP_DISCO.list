
LwIP_TCP_DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000166c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080017f4  080017f4  000117f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800180c  0800180c  0001180c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001814  08001814  00011814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001818  08001818  00011818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  0800181c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00000138  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000144  20000144  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000df88  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001de3  00000000  00000000  0002dfc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000074fd  00000000  00000000  0002fda7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a00  00000000  00000000  000372a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cc8  00000000  00000000  00037ca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00004ced  00000000  00000000  00038970  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00003bc9  00000000  00000000  0003d65d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00041226  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001eb0  00000000  00000000  000412a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080017dc 	.word	0x080017dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080017dc 	.word	0x080017dc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004da:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <HAL_InitTick+0x3c>)
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_InitTick+0x40>)
{
 80004de:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e0:	7818      	ldrb	r0, [r3, #0]
 80004e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e6:	fbb3 f3f0 	udiv	r3, r3, r0
 80004ea:	6810      	ldr	r0, [r2, #0]
 80004ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f0:	f000 f896 	bl	8000620 <HAL_SYSTICK_Config>
 80004f4:	4604      	mov	r4, r0
 80004f6:	b958      	cbnz	r0, 8000510 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f8:	2d0f      	cmp	r5, #15
 80004fa:	d809      	bhi.n	8000510 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004fc:	4602      	mov	r2, r0
 80004fe:	4629      	mov	r1, r5
 8000500:	f04f 30ff 	mov.w	r0, #4294967295
 8000504:	f000 f84a 	bl	800059c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <HAL_InitTick+0x44>)
 800050a:	4620      	mov	r0, r4
 800050c:	601d      	str	r5, [r3, #0]
 800050e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000510:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000512:	bd38      	pop	{r3, r4, r5, pc}
 8000514:	20000008 	.word	0x20000008
 8000518:	20000000 	.word	0x20000000
 800051c:	20000004 	.word	0x20000004

08000520 <HAL_Init>:
{
 8000520:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_Init+0x30>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800052a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000532:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800053a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f81b 	bl	8000578 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff ffc8 	bl	80004d8 <HAL_InitTick>
  HAL_MspInit();
 8000548:	f001 f812 	bl	8001570 <HAL_MspInit>
}
 800054c:	2000      	movs	r0, #0
 800054e:	bd08      	pop	{r3, pc}
 8000550:	40023c00 	.word	0x40023c00

08000554 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000554:	4a03      	ldr	r2, [pc, #12]	; (8000564 <HAL_IncTick+0x10>)
 8000556:	4b04      	ldr	r3, [pc, #16]	; (8000568 <HAL_IncTick+0x14>)
 8000558:	6811      	ldr	r1, [r2, #0]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	440b      	add	r3, r1
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20000028 	.word	0x20000028
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800056c:	4b01      	ldr	r3, [pc, #4]	; (8000574 <HAL_GetTick+0x8>)
 800056e:	6818      	ldr	r0, [r3, #0]
}
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20000028 	.word	0x20000028

08000578 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000578:	4a07      	ldr	r2, [pc, #28]	; (8000598 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800057a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800057c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000580:	041b      	lsls	r3, r3, #16
 8000582:	0c1b      	lsrs	r3, r3, #16
 8000584:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000588:	0200      	lsls	r0, r0, #8
 800058a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800058e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000592:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000594:	60d3      	str	r3, [r2, #12]
 8000596:	4770      	bx	lr
 8000598:	e000ed00 	.word	0xe000ed00

0800059c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800059c:	4b17      	ldr	r3, [pc, #92]	; (80005fc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	68dc      	ldr	r4, [r3, #12]
 80005a2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005a6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005aa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ac:	2b04      	cmp	r3, #4
 80005ae:	bf28      	it	cs
 80005b0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005b2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b4:	f04f 0501 	mov.w	r5, #1
 80005b8:	fa05 f303 	lsl.w	r3, r5, r3
 80005bc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005c0:	bf8c      	ite	hi
 80005c2:	3c03      	subhi	r4, #3
 80005c4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c6:	4019      	ands	r1, r3
 80005c8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005ca:	fa05 f404 	lsl.w	r4, r5, r4
 80005ce:	3c01      	subs	r4, #1
 80005d0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80005d2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d4:	ea42 0201 	orr.w	r2, r2, r1
 80005d8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005dc:	bfad      	iteet	ge
 80005de:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e2:	f000 000f 	andlt.w	r0, r0, #15
 80005e6:	4b06      	ldrlt	r3, [pc, #24]	; (8000600 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ec:	bfb5      	itete	lt
 80005ee:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	bf00      	nop
 80005fc:	e000ed00 	.word	0xe000ed00
 8000600:	e000ed14 	.word	0xe000ed14

08000604 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000604:	2800      	cmp	r0, #0
 8000606:	db08      	blt.n	800061a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000608:	0942      	lsrs	r2, r0, #5
 800060a:	2301      	movs	r3, #1
 800060c:	f000 001f 	and.w	r0, r0, #31
 8000610:	fa03 f000 	lsl.w	r0, r3, r0
 8000614:	4b01      	ldr	r3, [pc, #4]	; (800061c <HAL_NVIC_EnableIRQ+0x18>)
 8000616:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800061a:	4770      	bx	lr
 800061c:	e000e100 	.word	0xe000e100

08000620 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000620:	3801      	subs	r0, #1
 8000622:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000626:	d20a      	bcs.n	800063e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062a:	4a07      	ldr	r2, [pc, #28]	; (8000648 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800062c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062e:	21f0      	movs	r1, #240	; 0xf0
 8000630:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000634:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000636:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000638:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800063e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	e000e010 	.word	0xe000e010
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800064c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000650:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000652:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000654:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000804 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000658:	4a68      	ldr	r2, [pc, #416]	; (80007fc <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800065a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000808 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800065e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000660:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000662:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000664:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8000666:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000668:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 800066a:	42ac      	cmp	r4, r5
 800066c:	f040 80b0 	bne.w	80007d0 <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000670:	684c      	ldr	r4, [r1, #4]
 8000672:	f024 0c10 	bic.w	ip, r4, #16
 8000676:	f10c 36ff 	add.w	r6, ip, #4294967295
 800067a:	2e01      	cmp	r6, #1
 800067c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000680:	d812      	bhi.n	80006a8 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 8000682:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000684:	2603      	movs	r6, #3
 8000686:	fa06 f60e 	lsl.w	r6, r6, lr
 800068a:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800068e:	68ce      	ldr	r6, [r1, #12]
 8000690:	fa06 f60e 	lsl.w	r6, r6, lr
 8000694:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000696:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000698:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800069a:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800069e:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006a2:	409e      	lsls	r6, r3
 80006a4:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 80006a6:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006a8:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 80006aa:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006ac:	fa06 f60e 	lsl.w	r6, r6, lr
 80006b0:	43f6      	mvns	r6, r6
 80006b2:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006b6:	688f      	ldr	r7, [r1, #8]
 80006b8:	fa07 f70e 	lsl.w	r7, r7, lr
 80006bc:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006c0:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 80006c4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006c6:	d116      	bne.n	80006f6 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 80006c8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80006cc:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006d0:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80006d4:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006d8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80006dc:	f04f 0c0f 	mov.w	ip, #15
 80006e0:	fa0c fc0b 	lsl.w	ip, ip, fp
 80006e4:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80006e8:	690f      	ldr	r7, [r1, #16]
 80006ea:	fa07 f70b 	lsl.w	r7, r7, fp
 80006ee:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 80006f2:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 80006f6:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006f8:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006fa:	f004 0703 	and.w	r7, r4, #3
 80006fe:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000702:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000706:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000708:	00e6      	lsls	r6, r4, #3
 800070a:	d561      	bpl.n	80007d0 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070c:	f04f 0b00 	mov.w	fp, #0
 8000710:	f8cd b00c 	str.w	fp, [sp, #12]
 8000714:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000718:	4e39      	ldr	r6, [pc, #228]	; (8000800 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071a:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800071e:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000722:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000726:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800072a:	9703      	str	r7, [sp, #12]
 800072c:	9f03      	ldr	r7, [sp, #12]
 800072e:	f023 0703 	bic.w	r7, r3, #3
 8000732:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000736:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800073a:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800073e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000742:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000746:	f04f 0e0f 	mov.w	lr, #15
 800074a:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800074e:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000750:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000754:	d043      	beq.n	80007de <HAL_GPIO_Init+0x192>
 8000756:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800075a:	42b0      	cmp	r0, r6
 800075c:	d041      	beq.n	80007e2 <HAL_GPIO_Init+0x196>
 800075e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000762:	42b0      	cmp	r0, r6
 8000764:	d03f      	beq.n	80007e6 <HAL_GPIO_Init+0x19a>
 8000766:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800076a:	42b0      	cmp	r0, r6
 800076c:	d03d      	beq.n	80007ea <HAL_GPIO_Init+0x19e>
 800076e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000772:	42b0      	cmp	r0, r6
 8000774:	d03b      	beq.n	80007ee <HAL_GPIO_Init+0x1a2>
 8000776:	4548      	cmp	r0, r9
 8000778:	d03b      	beq.n	80007f2 <HAL_GPIO_Init+0x1a6>
 800077a:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800077e:	42b0      	cmp	r0, r6
 8000780:	d039      	beq.n	80007f6 <HAL_GPIO_Init+0x1aa>
 8000782:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000786:	42b0      	cmp	r0, r6
 8000788:	bf14      	ite	ne
 800078a:	2608      	movne	r6, #8
 800078c:	2607      	moveq	r6, #7
 800078e:	fa06 f60c 	lsl.w	r6, r6, ip
 8000792:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000796:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000798:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800079a:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800079c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007a0:	bf0c      	ite	eq
 80007a2:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007a4:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 80007a6:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80007a8:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007aa:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80007ae:	bf0c      	ite	eq
 80007b0:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007b2:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 80007b4:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007b6:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007b8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80007bc:	bf0c      	ite	eq
 80007be:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007c0:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 80007c2:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80007c4:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007c6:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80007c8:	bf54      	ite	pl
 80007ca:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80007cc:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 80007ce:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007d0:	3301      	adds	r3, #1
 80007d2:	2b10      	cmp	r3, #16
 80007d4:	f47f af45 	bne.w	8000662 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80007d8:	b005      	add	sp, #20
 80007da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007de:	465e      	mov	r6, fp
 80007e0:	e7d5      	b.n	800078e <HAL_GPIO_Init+0x142>
 80007e2:	2601      	movs	r6, #1
 80007e4:	e7d3      	b.n	800078e <HAL_GPIO_Init+0x142>
 80007e6:	2602      	movs	r6, #2
 80007e8:	e7d1      	b.n	800078e <HAL_GPIO_Init+0x142>
 80007ea:	2603      	movs	r6, #3
 80007ec:	e7cf      	b.n	800078e <HAL_GPIO_Init+0x142>
 80007ee:	2604      	movs	r6, #4
 80007f0:	e7cd      	b.n	800078e <HAL_GPIO_Init+0x142>
 80007f2:	2605      	movs	r6, #5
 80007f4:	e7cb      	b.n	800078e <HAL_GPIO_Init+0x142>
 80007f6:	2606      	movs	r6, #6
 80007f8:	e7c9      	b.n	800078e <HAL_GPIO_Init+0x142>
 80007fa:	bf00      	nop
 80007fc:	40013c00 	.word	0x40013c00
 8000800:	40020000 	.word	0x40020000
 8000804:	40023800 	.word	0x40023800
 8000808:	40021400 	.word	0x40021400

0800080c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800080c:	b10a      	cbz	r2, 8000812 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800080e:	6181      	str	r1, [r0, #24]
 8000810:	4770      	bx	lr
 8000812:	0409      	lsls	r1, r1, #16
 8000814:	e7fb      	b.n	800080e <HAL_GPIO_WritePin+0x2>

08000816 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000816:	4770      	bx	lr

08000818 <HAL_GPIO_EXTI_IRQHandler>:
{
 8000818:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800081a:	4b04      	ldr	r3, [pc, #16]	; (800082c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800081c:	6959      	ldr	r1, [r3, #20]
 800081e:	4201      	tst	r1, r0
 8000820:	d002      	beq.n	8000828 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000822:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000824:	f7ff fff7 	bl	8000816 <HAL_GPIO_EXTI_Callback>
 8000828:	bd08      	pop	{r3, pc}
 800082a:	bf00      	nop
 800082c:	40013c00 	.word	0x40013c00

08000830 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000830:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000834:	4604      	mov	r4, r0
 8000836:	b908      	cbnz	r0, 800083c <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000838:	2001      	movs	r0, #1
 800083a:	e03f      	b.n	80008bc <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800083c:	6803      	ldr	r3, [r0, #0]
 800083e:	07dd      	lsls	r5, r3, #31
 8000840:	d410      	bmi.n	8000864 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000842:	6823      	ldr	r3, [r4, #0]
 8000844:	0798      	lsls	r0, r3, #30
 8000846:	d45a      	bmi.n	80008fe <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000848:	6823      	ldr	r3, [r4, #0]
 800084a:	071a      	lsls	r2, r3, #28
 800084c:	f100 809c 	bmi.w	8000988 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000850:	6823      	ldr	r3, [r4, #0]
 8000852:	075b      	lsls	r3, r3, #29
 8000854:	f100 80ba 	bmi.w	80009cc <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000858:	69a0      	ldr	r0, [r4, #24]
 800085a:	2800      	cmp	r0, #0
 800085c:	f040 811b 	bne.w	8000a96 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000860:	2000      	movs	r0, #0
 8000862:	e02b      	b.n	80008bc <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000864:	4ba4      	ldr	r3, [pc, #656]	; (8000af8 <HAL_RCC_OscConfig+0x2c8>)
 8000866:	689a      	ldr	r2, [r3, #8]
 8000868:	f002 020c 	and.w	r2, r2, #12
 800086c:	2a04      	cmp	r2, #4
 800086e:	d007      	beq.n	8000880 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000870:	689a      	ldr	r2, [r3, #8]
 8000872:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000876:	2a08      	cmp	r2, #8
 8000878:	d10a      	bne.n	8000890 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	0259      	lsls	r1, r3, #9
 800087e:	d507      	bpl.n	8000890 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000880:	4b9d      	ldr	r3, [pc, #628]	; (8000af8 <HAL_RCC_OscConfig+0x2c8>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	039a      	lsls	r2, r3, #14
 8000886:	d5dc      	bpl.n	8000842 <HAL_RCC_OscConfig+0x12>
 8000888:	6863      	ldr	r3, [r4, #4]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d1d9      	bne.n	8000842 <HAL_RCC_OscConfig+0x12>
 800088e:	e7d3      	b.n	8000838 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000890:	6863      	ldr	r3, [r4, #4]
 8000892:	4d99      	ldr	r5, [pc, #612]	; (8000af8 <HAL_RCC_OscConfig+0x2c8>)
 8000894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000898:	d113      	bne.n	80008c2 <HAL_RCC_OscConfig+0x92>
 800089a:	682b      	ldr	r3, [r5, #0]
 800089c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008a0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80008a2:	f7ff fe63 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008a6:	4d94      	ldr	r5, [pc, #592]	; (8000af8 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80008a8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008aa:	682b      	ldr	r3, [r5, #0]
 80008ac:	039b      	lsls	r3, r3, #14
 80008ae:	d4c8      	bmi.n	8000842 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008b0:	f7ff fe5c 	bl	800056c <HAL_GetTick>
 80008b4:	1b80      	subs	r0, r0, r6
 80008b6:	2864      	cmp	r0, #100	; 0x64
 80008b8:	d9f7      	bls.n	80008aa <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 80008ba:	2003      	movs	r0, #3
}
 80008bc:	b002      	add	sp, #8
 80008be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008c6:	d104      	bne.n	80008d2 <HAL_RCC_OscConfig+0xa2>
 80008c8:	682b      	ldr	r3, [r5, #0]
 80008ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008ce:	602b      	str	r3, [r5, #0]
 80008d0:	e7e3      	b.n	800089a <HAL_RCC_OscConfig+0x6a>
 80008d2:	682a      	ldr	r2, [r5, #0]
 80008d4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80008d8:	602a      	str	r2, [r5, #0]
 80008da:	682a      	ldr	r2, [r5, #0]
 80008dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80008e0:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d1dd      	bne.n	80008a2 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 80008e6:	f7ff fe41 	bl	800056c <HAL_GetTick>
 80008ea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008ec:	682b      	ldr	r3, [r5, #0]
 80008ee:	039f      	lsls	r7, r3, #14
 80008f0:	d5a7      	bpl.n	8000842 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008f2:	f7ff fe3b 	bl	800056c <HAL_GetTick>
 80008f6:	1b80      	subs	r0, r0, r6
 80008f8:	2864      	cmp	r0, #100	; 0x64
 80008fa:	d9f7      	bls.n	80008ec <HAL_RCC_OscConfig+0xbc>
 80008fc:	e7dd      	b.n	80008ba <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008fe:	4b7e      	ldr	r3, [pc, #504]	; (8000af8 <HAL_RCC_OscConfig+0x2c8>)
 8000900:	689a      	ldr	r2, [r3, #8]
 8000902:	f012 0f0c 	tst.w	r2, #12
 8000906:	d007      	beq.n	8000918 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000908:	689a      	ldr	r2, [r3, #8]
 800090a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800090e:	2a08      	cmp	r2, #8
 8000910:	d111      	bne.n	8000936 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	025e      	lsls	r6, r3, #9
 8000916:	d40e      	bmi.n	8000936 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000918:	4b77      	ldr	r3, [pc, #476]	; (8000af8 <HAL_RCC_OscConfig+0x2c8>)
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	0795      	lsls	r5, r2, #30
 800091e:	d502      	bpl.n	8000926 <HAL_RCC_OscConfig+0xf6>
 8000920:	68e2      	ldr	r2, [r4, #12]
 8000922:	2a01      	cmp	r2, #1
 8000924:	d188      	bne.n	8000838 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	6921      	ldr	r1, [r4, #16]
 800092a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800092e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000932:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000934:	e788      	b.n	8000848 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000936:	68e2      	ldr	r2, [r4, #12]
 8000938:	4b70      	ldr	r3, [pc, #448]	; (8000afc <HAL_RCC_OscConfig+0x2cc>)
 800093a:	b1b2      	cbz	r2, 800096a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 800093c:	2201      	movs	r2, #1
 800093e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000940:	f7ff fe14 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000944:	4d6c      	ldr	r5, [pc, #432]	; (8000af8 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000946:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000948:	682b      	ldr	r3, [r5, #0]
 800094a:	0798      	lsls	r0, r3, #30
 800094c:	d507      	bpl.n	800095e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800094e:	682b      	ldr	r3, [r5, #0]
 8000950:	6922      	ldr	r2, [r4, #16]
 8000952:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000956:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800095a:	602b      	str	r3, [r5, #0]
 800095c:	e774      	b.n	8000848 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800095e:	f7ff fe05 	bl	800056c <HAL_GetTick>
 8000962:	1b80      	subs	r0, r0, r6
 8000964:	2802      	cmp	r0, #2
 8000966:	d9ef      	bls.n	8000948 <HAL_RCC_OscConfig+0x118>
 8000968:	e7a7      	b.n	80008ba <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 800096a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800096c:	f7ff fdfe 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000970:	4d61      	ldr	r5, [pc, #388]	; (8000af8 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000972:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000974:	682b      	ldr	r3, [r5, #0]
 8000976:	0799      	lsls	r1, r3, #30
 8000978:	f57f af66 	bpl.w	8000848 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800097c:	f7ff fdf6 	bl	800056c <HAL_GetTick>
 8000980:	1b80      	subs	r0, r0, r6
 8000982:	2802      	cmp	r0, #2
 8000984:	d9f6      	bls.n	8000974 <HAL_RCC_OscConfig+0x144>
 8000986:	e798      	b.n	80008ba <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000988:	6962      	ldr	r2, [r4, #20]
 800098a:	4b5d      	ldr	r3, [pc, #372]	; (8000b00 <HAL_RCC_OscConfig+0x2d0>)
 800098c:	b17a      	cbz	r2, 80009ae <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 800098e:	2201      	movs	r2, #1
 8000990:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000992:	f7ff fdeb 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000996:	4d58      	ldr	r5, [pc, #352]	; (8000af8 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000998:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800099a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800099c:	079f      	lsls	r7, r3, #30
 800099e:	f53f af57 	bmi.w	8000850 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009a2:	f7ff fde3 	bl	800056c <HAL_GetTick>
 80009a6:	1b80      	subs	r0, r0, r6
 80009a8:	2802      	cmp	r0, #2
 80009aa:	d9f6      	bls.n	800099a <HAL_RCC_OscConfig+0x16a>
 80009ac:	e785      	b.n	80008ba <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 80009ae:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009b0:	f7ff fddc 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009b4:	4d50      	ldr	r5, [pc, #320]	; (8000af8 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80009b6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009b8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009ba:	0798      	lsls	r0, r3, #30
 80009bc:	f57f af48 	bpl.w	8000850 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009c0:	f7ff fdd4 	bl	800056c <HAL_GetTick>
 80009c4:	1b80      	subs	r0, r0, r6
 80009c6:	2802      	cmp	r0, #2
 80009c8:	d9f6      	bls.n	80009b8 <HAL_RCC_OscConfig+0x188>
 80009ca:	e776      	b.n	80008ba <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009cc:	4b4a      	ldr	r3, [pc, #296]	; (8000af8 <HAL_RCC_OscConfig+0x2c8>)
 80009ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009d0:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80009d4:	d128      	bne.n	8000a28 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	9201      	str	r2, [sp, #4]
 80009d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009de:	641a      	str	r2, [r3, #64]	; 0x40
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e6:	9301      	str	r3, [sp, #4]
 80009e8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80009ea:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009ec:	4d45      	ldr	r5, [pc, #276]	; (8000b04 <HAL_RCC_OscConfig+0x2d4>)
 80009ee:	682b      	ldr	r3, [r5, #0]
 80009f0:	05d9      	lsls	r1, r3, #23
 80009f2:	d51b      	bpl.n	8000a2c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009f4:	68a3      	ldr	r3, [r4, #8]
 80009f6:	4d40      	ldr	r5, [pc, #256]	; (8000af8 <HAL_RCC_OscConfig+0x2c8>)
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d127      	bne.n	8000a4c <HAL_RCC_OscConfig+0x21c>
 80009fc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000a04:	f7ff fdb2 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a08:	4d3b      	ldr	r5, [pc, #236]	; (8000af8 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000a0a:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a0c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a10:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a12:	079b      	lsls	r3, r3, #30
 8000a14:	d539      	bpl.n	8000a8a <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000a16:	2e00      	cmp	r6, #0
 8000a18:	f43f af1e 	beq.w	8000858 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a1c:	4a36      	ldr	r2, [pc, #216]	; (8000af8 <HAL_RCC_OscConfig+0x2c8>)
 8000a1e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000a20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a24:	6413      	str	r3, [r2, #64]	; 0x40
 8000a26:	e717      	b.n	8000858 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000a28:	2600      	movs	r6, #0
 8000a2a:	e7df      	b.n	80009ec <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a2c:	682b      	ldr	r3, [r5, #0]
 8000a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a32:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000a34:	f7ff fd9a 	bl	800056c <HAL_GetTick>
 8000a38:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a3a:	682b      	ldr	r3, [r5, #0]
 8000a3c:	05da      	lsls	r2, r3, #23
 8000a3e:	d4d9      	bmi.n	80009f4 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a40:	f7ff fd94 	bl	800056c <HAL_GetTick>
 8000a44:	1bc0      	subs	r0, r0, r7
 8000a46:	2802      	cmp	r0, #2
 8000a48:	d9f7      	bls.n	8000a3a <HAL_RCC_OscConfig+0x20a>
 8000a4a:	e736      	b.n	80008ba <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a4c:	2b05      	cmp	r3, #5
 8000a4e:	d104      	bne.n	8000a5a <HAL_RCC_OscConfig+0x22a>
 8000a50:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a52:	f043 0304 	orr.w	r3, r3, #4
 8000a56:	672b      	str	r3, [r5, #112]	; 0x70
 8000a58:	e7d0      	b.n	80009fc <HAL_RCC_OscConfig+0x1cc>
 8000a5a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a5c:	f022 0201 	bic.w	r2, r2, #1
 8000a60:	672a      	str	r2, [r5, #112]	; 0x70
 8000a62:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a64:	f022 0204 	bic.w	r2, r2, #4
 8000a68:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d1ca      	bne.n	8000a04 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000a6e:	f7ff fd7d 	bl	800056c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a72:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000a76:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a78:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a7a:	0798      	lsls	r0, r3, #30
 8000a7c:	d5cb      	bpl.n	8000a16 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a7e:	f7ff fd75 	bl	800056c <HAL_GetTick>
 8000a82:	1bc0      	subs	r0, r0, r7
 8000a84:	4540      	cmp	r0, r8
 8000a86:	d9f7      	bls.n	8000a78 <HAL_RCC_OscConfig+0x248>
 8000a88:	e717      	b.n	80008ba <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a8a:	f7ff fd6f 	bl	800056c <HAL_GetTick>
 8000a8e:	1bc0      	subs	r0, r0, r7
 8000a90:	4540      	cmp	r0, r8
 8000a92:	d9bd      	bls.n	8000a10 <HAL_RCC_OscConfig+0x1e0>
 8000a94:	e711      	b.n	80008ba <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000a96:	4d18      	ldr	r5, [pc, #96]	; (8000af8 <HAL_RCC_OscConfig+0x2c8>)
 8000a98:	68ab      	ldr	r3, [r5, #8]
 8000a9a:	f003 030c 	and.w	r3, r3, #12
 8000a9e:	2b08      	cmp	r3, #8
 8000aa0:	d047      	beq.n	8000b32 <HAL_RCC_OscConfig+0x302>
 8000aa2:	4e19      	ldr	r6, [pc, #100]	; (8000b08 <HAL_RCC_OscConfig+0x2d8>)
 8000aa4:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000aa6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000aa8:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000aaa:	d135      	bne.n	8000b18 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000aac:	f7ff fd5e 	bl	800056c <HAL_GetTick>
 8000ab0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ab2:	682b      	ldr	r3, [r5, #0]
 8000ab4:	0199      	lsls	r1, r3, #6
 8000ab6:	d429      	bmi.n	8000b0c <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ab8:	6a22      	ldr	r2, [r4, #32]
 8000aba:	69e3      	ldr	r3, [r4, #28]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ac0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000ac4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000ac6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000aca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000acc:	4c0a      	ldr	r4, [pc, #40]	; (8000af8 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ace:	0852      	lsrs	r2, r2, #1
 8000ad0:	3a01      	subs	r2, #1
 8000ad2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ad6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000ad8:	2301      	movs	r3, #1
 8000ada:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000adc:	f7ff fd46 	bl	800056c <HAL_GetTick>
 8000ae0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ae2:	6823      	ldr	r3, [r4, #0]
 8000ae4:	019a      	lsls	r2, r3, #6
 8000ae6:	f53f aebb 	bmi.w	8000860 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000aea:	f7ff fd3f 	bl	800056c <HAL_GetTick>
 8000aee:	1b40      	subs	r0, r0, r5
 8000af0:	2802      	cmp	r0, #2
 8000af2:	d9f6      	bls.n	8000ae2 <HAL_RCC_OscConfig+0x2b2>
 8000af4:	e6e1      	b.n	80008ba <HAL_RCC_OscConfig+0x8a>
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800
 8000afc:	42470000 	.word	0x42470000
 8000b00:	42470e80 	.word	0x42470e80
 8000b04:	40007000 	.word	0x40007000
 8000b08:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b0c:	f7ff fd2e 	bl	800056c <HAL_GetTick>
 8000b10:	1bc0      	subs	r0, r0, r7
 8000b12:	2802      	cmp	r0, #2
 8000b14:	d9cd      	bls.n	8000ab2 <HAL_RCC_OscConfig+0x282>
 8000b16:	e6d0      	b.n	80008ba <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8000b18:	f7ff fd28 	bl	800056c <HAL_GetTick>
 8000b1c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b1e:	682b      	ldr	r3, [r5, #0]
 8000b20:	019b      	lsls	r3, r3, #6
 8000b22:	f57f ae9d 	bpl.w	8000860 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b26:	f7ff fd21 	bl	800056c <HAL_GetTick>
 8000b2a:	1b00      	subs	r0, r0, r4
 8000b2c:	2802      	cmp	r0, #2
 8000b2e:	d9f6      	bls.n	8000b1e <HAL_RCC_OscConfig+0x2ee>
 8000b30:	e6c3      	b.n	80008ba <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000b32:	2801      	cmp	r0, #1
 8000b34:	f43f aec2 	beq.w	80008bc <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 8000b38:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b3a:	69e3      	ldr	r3, [r4, #28]
 8000b3c:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8000b40:	429a      	cmp	r2, r3
 8000b42:	f47f ae79 	bne.w	8000838 <HAL_RCC_OscConfig+0x8>
 8000b46:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000b48:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	f47f ae73 	bne.w	8000838 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000b52:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000b58:	4003      	ands	r3, r0
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	f47f ae6c 	bne.w	8000838 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000b60:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000b62:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000b66:	4293      	cmp	r3, r2
 8000b68:	f47f ae66 	bne.w	8000838 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000b6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000b6e:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8000b72:	1ac0      	subs	r0, r0, r3
 8000b74:	bf18      	it	ne
 8000b76:	2001      	movne	r0, #1
 8000b78:	e6a0      	b.n	80008bc <HAL_RCC_OscConfig+0x8c>
 8000b7a:	bf00      	nop

08000b7c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b7c:	4913      	ldr	r1, [pc, #76]	; (8000bcc <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000b7e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b80:	688b      	ldr	r3, [r1, #8]
 8000b82:	f003 030c 	and.w	r3, r3, #12
 8000b86:	2b04      	cmp	r3, #4
 8000b88:	d003      	beq.n	8000b92 <HAL_RCC_GetSysClockFreq+0x16>
 8000b8a:	2b08      	cmp	r3, #8
 8000b8c:	d003      	beq.n	8000b96 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000b8e:	4810      	ldr	r0, [pc, #64]	; (8000bd0 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b90:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000b92:	4810      	ldr	r0, [pc, #64]	; (8000bd4 <HAL_RCC_GetSysClockFreq+0x58>)
 8000b94:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b96:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b98:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b9a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b9c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ba0:	bf14      	ite	ne
 8000ba2:	480c      	ldrne	r0, [pc, #48]	; (8000bd4 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ba4:	480a      	ldreq	r0, [pc, #40]	; (8000bd0 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ba6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000baa:	bf18      	it	ne
 8000bac:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bae:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bb2:	fba1 0100 	umull	r0, r1, r1, r0
 8000bb6:	f7ff fb07 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000bba:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <HAL_RCC_GetSysClockFreq+0x50>)
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000bc6:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bca:	bd08      	pop	{r3, pc}
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	00f42400 	.word	0x00f42400
 8000bd4:	007a1200 	.word	0x007a1200

08000bd8 <HAL_RCC_ClockConfig>:
{
 8000bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bdc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000bde:	4604      	mov	r4, r0
 8000be0:	b910      	cbnz	r0, 8000be8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000be2:	2001      	movs	r0, #1
 8000be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000be8:	4b44      	ldr	r3, [pc, #272]	; (8000cfc <HAL_RCC_ClockConfig+0x124>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	f002 020f 	and.w	r2, r2, #15
 8000bf0:	428a      	cmp	r2, r1
 8000bf2:	d329      	bcc.n	8000c48 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000bf4:	6821      	ldr	r1, [r4, #0]
 8000bf6:	078f      	lsls	r7, r1, #30
 8000bf8:	d42e      	bmi.n	8000c58 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000bfa:	07c8      	lsls	r0, r1, #31
 8000bfc:	d441      	bmi.n	8000c82 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000bfe:	4b3f      	ldr	r3, [pc, #252]	; (8000cfc <HAL_RCC_ClockConfig+0x124>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	f002 020f 	and.w	r2, r2, #15
 8000c06:	4295      	cmp	r5, r2
 8000c08:	d367      	bcc.n	8000cda <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c0a:	6822      	ldr	r2, [r4, #0]
 8000c0c:	0751      	lsls	r1, r2, #29
 8000c0e:	d46d      	bmi.n	8000cec <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c10:	0713      	lsls	r3, r2, #28
 8000c12:	d507      	bpl.n	8000c24 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c14:	4a3a      	ldr	r2, [pc, #232]	; (8000d00 <HAL_RCC_ClockConfig+0x128>)
 8000c16:	6921      	ldr	r1, [r4, #16]
 8000c18:	6893      	ldr	r3, [r2, #8]
 8000c1a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c1e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c22:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c24:	f7ff ffaa 	bl	8000b7c <HAL_RCC_GetSysClockFreq>
 8000c28:	4b35      	ldr	r3, [pc, #212]	; (8000d00 <HAL_RCC_ClockConfig+0x128>)
 8000c2a:	4a36      	ldr	r2, [pc, #216]	; (8000d04 <HAL_RCC_ClockConfig+0x12c>)
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c32:	5cd3      	ldrb	r3, [r2, r3]
 8000c34:	40d8      	lsrs	r0, r3
 8000c36:	4b34      	ldr	r3, [pc, #208]	; (8000d08 <HAL_RCC_ClockConfig+0x130>)
 8000c38:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000c3a:	4b34      	ldr	r3, [pc, #208]	; (8000d0c <HAL_RCC_ClockConfig+0x134>)
 8000c3c:	6818      	ldr	r0, [r3, #0]
 8000c3e:	f7ff fc4b 	bl	80004d8 <HAL_InitTick>
  return HAL_OK;
 8000c42:	2000      	movs	r0, #0
 8000c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c48:	b2ca      	uxtb	r2, r1
 8000c4a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f003 030f 	and.w	r3, r3, #15
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d1c5      	bne.n	8000be2 <HAL_RCC_ClockConfig+0xa>
 8000c56:	e7cd      	b.n	8000bf4 <HAL_RCC_ClockConfig+0x1c>
 8000c58:	4b29      	ldr	r3, [pc, #164]	; (8000d00 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c5a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c5e:	bf1e      	ittt	ne
 8000c60:	689a      	ldrne	r2, [r3, #8]
 8000c62:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000c66:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c68:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c6a:	bf42      	ittt	mi
 8000c6c:	689a      	ldrmi	r2, [r3, #8]
 8000c6e:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000c72:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c74:	689a      	ldr	r2, [r3, #8]
 8000c76:	68a0      	ldr	r0, [r4, #8]
 8000c78:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000c7c:	4302      	orrs	r2, r0
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	e7bb      	b.n	8000bfa <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c82:	6862      	ldr	r2, [r4, #4]
 8000c84:	4b1e      	ldr	r3, [pc, #120]	; (8000d00 <HAL_RCC_ClockConfig+0x128>)
 8000c86:	2a01      	cmp	r2, #1
 8000c88:	d11d      	bne.n	8000cc6 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c90:	d0a7      	beq.n	8000be2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c92:	4e1b      	ldr	r6, [pc, #108]	; (8000d00 <HAL_RCC_ClockConfig+0x128>)
 8000c94:	68b3      	ldr	r3, [r6, #8]
 8000c96:	f023 0303 	bic.w	r3, r3, #3
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000c9e:	f7ff fc65 	bl	800056c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ca2:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000ca6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ca8:	68b3      	ldr	r3, [r6, #8]
 8000caa:	6862      	ldr	r2, [r4, #4]
 8000cac:	f003 030c 	and.w	r3, r3, #12
 8000cb0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000cb4:	d0a3      	beq.n	8000bfe <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cb6:	f7ff fc59 	bl	800056c <HAL_GetTick>
 8000cba:	1bc0      	subs	r0, r0, r7
 8000cbc:	4540      	cmp	r0, r8
 8000cbe:	d9f3      	bls.n	8000ca8 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8000cc0:	2003      	movs	r0, #3
}
 8000cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cc6:	1e91      	subs	r1, r2, #2
 8000cc8:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cca:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000ccc:	d802      	bhi.n	8000cd4 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cce:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000cd2:	e7dd      	b.n	8000c90 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cd4:	f013 0f02 	tst.w	r3, #2
 8000cd8:	e7da      	b.n	8000c90 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cda:	b2ea      	uxtb	r2, r5
 8000cdc:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f003 030f 	and.w	r3, r3, #15
 8000ce4:	429d      	cmp	r5, r3
 8000ce6:	f47f af7c 	bne.w	8000be2 <HAL_RCC_ClockConfig+0xa>
 8000cea:	e78e      	b.n	8000c0a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000cec:	4904      	ldr	r1, [pc, #16]	; (8000d00 <HAL_RCC_ClockConfig+0x128>)
 8000cee:	68e0      	ldr	r0, [r4, #12]
 8000cf0:	688b      	ldr	r3, [r1, #8]
 8000cf2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000cf6:	4303      	orrs	r3, r0
 8000cf8:	608b      	str	r3, [r1, #8]
 8000cfa:	e789      	b.n	8000c10 <HAL_RCC_ClockConfig+0x38>
 8000cfc:	40023c00 	.word	0x40023c00
 8000d00:	40023800 	.word	0x40023800
 8000d04:	080017f4 	.word	0x080017f4
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	20000004 	.word	0x20000004

08000d10 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000d10:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000d12:	4a05      	ldr	r2, [pc, #20]	; (8000d28 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000d1a:	5cd3      	ldrb	r3, [r2, r3]
 8000d1c:	4a03      	ldr	r2, [pc, #12]	; (8000d2c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000d1e:	6810      	ldr	r0, [r2, #0]
}
 8000d20:	40d8      	lsrs	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	40023800 	.word	0x40023800
 8000d28:	08001804 	.word	0x08001804
 8000d2c:	20000008 	.word	0x20000008

08000d30 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000d32:	4a05      	ldr	r2, [pc, #20]	; (8000d48 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000d3a:	5cd3      	ldrb	r3, [r2, r3]
 8000d3c:	4a03      	ldr	r2, [pc, #12]	; (8000d4c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000d3e:	6810      	ldr	r0, [r2, #0]
}
 8000d40:	40d8      	lsrs	r0, r3
 8000d42:	4770      	bx	lr
 8000d44:	40023800 	.word	0x40023800
 8000d48:	08001804 	.word	0x08001804
 8000d4c:	20000008 	.word	0x20000008

08000d50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000d50:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8000d52:	4604      	mov	r4, r0
 8000d54:	2800      	cmp	r0, #0
 8000d56:	d036      	beq.n	8000dc6 <HAL_SPI_Init+0x76>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8000d5c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000d60:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d64:	b91b      	cbnz	r3, 8000d6e <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8000d66:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000d6a:	f000 fc21 	bl	80015b0 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000d6e:	6821      	ldr	r1, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000d70:	68a0      	ldr	r0, [r4, #8]
 8000d72:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000d74:	2302      	movs	r3, #2
 8000d76:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000d7a:	680b      	ldr	r3, [r1, #0]
 8000d7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d80:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000d82:	6863      	ldr	r3, [r4, #4]
 8000d84:	4303      	orrs	r3, r0
 8000d86:	68e0      	ldr	r0, [r4, #12]
 8000d88:	4303      	orrs	r3, r0
 8000d8a:	6920      	ldr	r0, [r4, #16]
 8000d8c:	4303      	orrs	r3, r0
 8000d8e:	6960      	ldr	r0, [r4, #20]
 8000d90:	4303      	orrs	r3, r0
 8000d92:	69e0      	ldr	r0, [r4, #28]
 8000d94:	4303      	orrs	r3, r0
 8000d96:	6a20      	ldr	r0, [r4, #32]
 8000d98:	4303      	orrs	r3, r0
 8000d9a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000d9c:	4303      	orrs	r3, r0
 8000d9e:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000da2:	4303      	orrs	r3, r0
 8000da4:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000da6:	0c12      	lsrs	r2, r2, #16
 8000da8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000daa:	f002 0204 	and.w	r2, r2, #4
 8000dae:	431a      	orrs	r2, r3
 8000db0:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000db2:	69cb      	ldr	r3, [r1, #28]
 8000db4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000db8:	61cb      	str	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000dba:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8000dbc:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000dbe:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000dc0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8000dc4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000dc6:	2001      	movs	r0, #1
}
 8000dc8:	bd10      	pop	{r4, pc}

08000dca <HAL_TIM_PeriodElapsedCallback>:
 8000dca:	4770      	bx	lr

08000dcc <HAL_TIM_OC_DelayElapsedCallback>:
 8000dcc:	4770      	bx	lr

08000dce <HAL_TIM_IC_CaptureCallback>:
 8000dce:	4770      	bx	lr

08000dd0 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000dd0:	4770      	bx	lr

08000dd2 <HAL_TIM_TriggerCallback>:
 8000dd2:	4770      	bx	lr

08000dd4 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000dd4:	6803      	ldr	r3, [r0, #0]
 8000dd6:	691a      	ldr	r2, [r3, #16]
 8000dd8:	0791      	lsls	r1, r2, #30
{
 8000dda:	b510      	push	{r4, lr}
 8000ddc:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000dde:	d50e      	bpl.n	8000dfe <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000de0:	68da      	ldr	r2, [r3, #12]
 8000de2:	0792      	lsls	r2, r2, #30
 8000de4:	d50b      	bpl.n	8000dfe <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000de6:	f06f 0202 	mvn.w	r2, #2
 8000dea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000dec:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000dee:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000df0:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000df2:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000df4:	d077      	beq.n	8000ee6 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000df6:	f7ff ffea 	bl	8000dce <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000dfe:	6823      	ldr	r3, [r4, #0]
 8000e00:	691a      	ldr	r2, [r3, #16]
 8000e02:	0750      	lsls	r0, r2, #29
 8000e04:	d510      	bpl.n	8000e28 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000e06:	68da      	ldr	r2, [r3, #12]
 8000e08:	0751      	lsls	r1, r2, #29
 8000e0a:	d50d      	bpl.n	8000e28 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000e0c:	f06f 0204 	mvn.w	r2, #4
 8000e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000e12:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000e14:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000e16:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000e1a:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000e1c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000e1e:	d068      	beq.n	8000ef2 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000e20:	f7ff ffd5 	bl	8000dce <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e24:	2300      	movs	r3, #0
 8000e26:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000e28:	6823      	ldr	r3, [r4, #0]
 8000e2a:	691a      	ldr	r2, [r3, #16]
 8000e2c:	0712      	lsls	r2, r2, #28
 8000e2e:	d50f      	bpl.n	8000e50 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000e30:	68da      	ldr	r2, [r3, #12]
 8000e32:	0710      	lsls	r0, r2, #28
 8000e34:	d50c      	bpl.n	8000e50 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000e36:	f06f 0208 	mvn.w	r2, #8
 8000e3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000e3c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000e3e:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000e40:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000e42:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000e44:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000e46:	d05a      	beq.n	8000efe <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000e48:	f7ff ffc1 	bl	8000dce <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000e50:	6823      	ldr	r3, [r4, #0]
 8000e52:	691a      	ldr	r2, [r3, #16]
 8000e54:	06d2      	lsls	r2, r2, #27
 8000e56:	d510      	bpl.n	8000e7a <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000e58:	68da      	ldr	r2, [r3, #12]
 8000e5a:	06d0      	lsls	r0, r2, #27
 8000e5c:	d50d      	bpl.n	8000e7a <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000e5e:	f06f 0210 	mvn.w	r2, #16
 8000e62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000e64:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000e66:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000e68:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000e6c:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000e6e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000e70:	d04b      	beq.n	8000f0a <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000e72:	f7ff ffac 	bl	8000dce <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e76:	2300      	movs	r3, #0
 8000e78:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000e7a:	6823      	ldr	r3, [r4, #0]
 8000e7c:	691a      	ldr	r2, [r3, #16]
 8000e7e:	07d1      	lsls	r1, r2, #31
 8000e80:	d508      	bpl.n	8000e94 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000e82:	68da      	ldr	r2, [r3, #12]
 8000e84:	07d2      	lsls	r2, r2, #31
 8000e86:	d505      	bpl.n	8000e94 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000e88:	f06f 0201 	mvn.w	r2, #1
 8000e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000e8e:	4620      	mov	r0, r4
 8000e90:	f7ff ff9b 	bl	8000dca <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000e94:	6823      	ldr	r3, [r4, #0]
 8000e96:	691a      	ldr	r2, [r3, #16]
 8000e98:	0610      	lsls	r0, r2, #24
 8000e9a:	d508      	bpl.n	8000eae <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000e9c:	68da      	ldr	r2, [r3, #12]
 8000e9e:	0611      	lsls	r1, r2, #24
 8000ea0:	d505      	bpl.n	8000eae <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000ea2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000ea6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8000ea8:	4620      	mov	r0, r4
 8000eaa:	f000 f996 	bl	80011da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000eae:	6823      	ldr	r3, [r4, #0]
 8000eb0:	691a      	ldr	r2, [r3, #16]
 8000eb2:	0652      	lsls	r2, r2, #25
 8000eb4:	d508      	bpl.n	8000ec8 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000eb6:	68da      	ldr	r2, [r3, #12]
 8000eb8:	0650      	lsls	r0, r2, #25
 8000eba:	d505      	bpl.n	8000ec8 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000ebc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	f7ff ff85 	bl	8000dd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000ec8:	6823      	ldr	r3, [r4, #0]
 8000eca:	691a      	ldr	r2, [r3, #16]
 8000ecc:	0691      	lsls	r1, r2, #26
 8000ece:	d522      	bpl.n	8000f16 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000ed0:	68da      	ldr	r2, [r3, #12]
 8000ed2:	0692      	lsls	r2, r2, #26
 8000ed4:	d51f      	bpl.n	8000f16 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000ed6:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000eda:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000edc:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8000ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8000ee2:	f000 b979 	b.w	80011d8 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ee6:	f7ff ff71 	bl	8000dcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000eea:	4620      	mov	r0, r4
 8000eec:	f7ff ff70 	bl	8000dd0 <HAL_TIM_PWM_PulseFinishedCallback>
 8000ef0:	e783      	b.n	8000dfa <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ef2:	f7ff ff6b 	bl	8000dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000ef6:	4620      	mov	r0, r4
 8000ef8:	f7ff ff6a 	bl	8000dd0 <HAL_TIM_PWM_PulseFinishedCallback>
 8000efc:	e792      	b.n	8000e24 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000efe:	f7ff ff65 	bl	8000dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f02:	4620      	mov	r0, r4
 8000f04:	f7ff ff64 	bl	8000dd0 <HAL_TIM_PWM_PulseFinishedCallback>
 8000f08:	e7a0      	b.n	8000e4c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f0a:	f7ff ff5f 	bl	8000dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f0e:	4620      	mov	r0, r4
 8000f10:	f7ff ff5e 	bl	8000dd0 <HAL_TIM_PWM_PulseFinishedCallback>
 8000f14:	e7af      	b.n	8000e76 <HAL_TIM_IRQHandler+0xa2>
 8000f16:	bd10      	pop	{r4, pc}

08000f18 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000f18:	4a30      	ldr	r2, [pc, #192]	; (8000fdc <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8000f1a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000f1c:	4290      	cmp	r0, r2
 8000f1e:	d012      	beq.n	8000f46 <TIM_Base_SetConfig+0x2e>
 8000f20:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000f24:	d00f      	beq.n	8000f46 <TIM_Base_SetConfig+0x2e>
 8000f26:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000f2a:	4290      	cmp	r0, r2
 8000f2c:	d00b      	beq.n	8000f46 <TIM_Base_SetConfig+0x2e>
 8000f2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f32:	4290      	cmp	r0, r2
 8000f34:	d007      	beq.n	8000f46 <TIM_Base_SetConfig+0x2e>
 8000f36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f3a:	4290      	cmp	r0, r2
 8000f3c:	d003      	beq.n	8000f46 <TIM_Base_SetConfig+0x2e>
 8000f3e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000f42:	4290      	cmp	r0, r2
 8000f44:	d119      	bne.n	8000f7a <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000f46:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000f4c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000f4e:	4a23      	ldr	r2, [pc, #140]	; (8000fdc <TIM_Base_SetConfig+0xc4>)
 8000f50:	4290      	cmp	r0, r2
 8000f52:	d029      	beq.n	8000fa8 <TIM_Base_SetConfig+0x90>
 8000f54:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000f58:	d026      	beq.n	8000fa8 <TIM_Base_SetConfig+0x90>
 8000f5a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000f5e:	4290      	cmp	r0, r2
 8000f60:	d022      	beq.n	8000fa8 <TIM_Base_SetConfig+0x90>
 8000f62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f66:	4290      	cmp	r0, r2
 8000f68:	d01e      	beq.n	8000fa8 <TIM_Base_SetConfig+0x90>
 8000f6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f6e:	4290      	cmp	r0, r2
 8000f70:	d01a      	beq.n	8000fa8 <TIM_Base_SetConfig+0x90>
 8000f72:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000f76:	4290      	cmp	r0, r2
 8000f78:	d016      	beq.n	8000fa8 <TIM_Base_SetConfig+0x90>
 8000f7a:	4a19      	ldr	r2, [pc, #100]	; (8000fe0 <TIM_Base_SetConfig+0xc8>)
 8000f7c:	4290      	cmp	r0, r2
 8000f7e:	d013      	beq.n	8000fa8 <TIM_Base_SetConfig+0x90>
 8000f80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f84:	4290      	cmp	r0, r2
 8000f86:	d00f      	beq.n	8000fa8 <TIM_Base_SetConfig+0x90>
 8000f88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f8c:	4290      	cmp	r0, r2
 8000f8e:	d00b      	beq.n	8000fa8 <TIM_Base_SetConfig+0x90>
 8000f90:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8000f94:	4290      	cmp	r0, r2
 8000f96:	d007      	beq.n	8000fa8 <TIM_Base_SetConfig+0x90>
 8000f98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f9c:	4290      	cmp	r0, r2
 8000f9e:	d003      	beq.n	8000fa8 <TIM_Base_SetConfig+0x90>
 8000fa0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fa4:	4290      	cmp	r0, r2
 8000fa6:	d103      	bne.n	8000fb0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000fa8:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000fae:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000fb0:	694a      	ldr	r2, [r1, #20]
 8000fb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000fb6:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000fb8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000fba:	688b      	ldr	r3, [r1, #8]
 8000fbc:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000fbe:	680b      	ldr	r3, [r1, #0]
 8000fc0:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <TIM_Base_SetConfig+0xc4>)
 8000fc4:	4298      	cmp	r0, r3
 8000fc6:	d003      	beq.n	8000fd0 <TIM_Base_SetConfig+0xb8>
 8000fc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000fcc:	4298      	cmp	r0, r3
 8000fce:	d101      	bne.n	8000fd4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000fd0:	690b      	ldr	r3, [r1, #16]
 8000fd2:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	6143      	str	r3, [r0, #20]
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40010000 	.word	0x40010000
 8000fe0:	40014000 	.word	0x40014000

08000fe4 <HAL_TIM_Base_Init>:
{
 8000fe4:	b510      	push	{r4, lr}
  if (htim == NULL)
 8000fe6:	4604      	mov	r4, r0
 8000fe8:	b1a0      	cbz	r0, 8001014 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8000fea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000fee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ff2:	b91b      	cbnz	r3, 8000ffc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000ff4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000ff8:	f000 fb10 	bl	800161c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001002:	6820      	ldr	r0, [r4, #0]
 8001004:	1d21      	adds	r1, r4, #4
 8001006:	f7ff ff87 	bl	8000f18 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800100a:	2301      	movs	r3, #1
 800100c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001010:	2000      	movs	r0, #0
 8001012:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001014:	2001      	movs	r0, #1
}
 8001016:	bd10      	pop	{r4, pc}

08001018 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001018:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800101a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800101c:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800101e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001022:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001026:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001028:	6083      	str	r3, [r0, #8]
 800102a:	bd10      	pop	{r4, pc}

0800102c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800102c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001030:	2b01      	cmp	r3, #1
{
 8001032:	b570      	push	{r4, r5, r6, lr}
 8001034:	4604      	mov	r4, r0
 8001036:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800103a:	d019      	beq.n	8001070 <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 800103c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001040:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001042:	2301      	movs	r3, #1
 8001044:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001048:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800104a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800104e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001052:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001054:	680b      	ldr	r3, [r1, #0]
 8001056:	2b40      	cmp	r3, #64	; 0x40
 8001058:	d065      	beq.n	8001126 <HAL_TIM_ConfigClockSource+0xfa>
 800105a:	d815      	bhi.n	8001088 <HAL_TIM_ConfigClockSource+0x5c>
 800105c:	2b10      	cmp	r3, #16
 800105e:	d00c      	beq.n	800107a <HAL_TIM_ConfigClockSource+0x4e>
 8001060:	d807      	bhi.n	8001072 <HAL_TIM_ConfigClockSource+0x46>
 8001062:	b153      	cbz	r3, 800107a <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8001064:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001066:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001068:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800106c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001070:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001072:	2b20      	cmp	r3, #32
 8001074:	d001      	beq.n	800107a <HAL_TIM_ConfigClockSource+0x4e>
 8001076:	2b30      	cmp	r3, #48	; 0x30
 8001078:	d1f4      	bne.n	8001064 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 800107a:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800107c:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8001080:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001084:	4313      	orrs	r3, r2
 8001086:	e01a      	b.n	80010be <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8001088:	2b60      	cmp	r3, #96	; 0x60
 800108a:	d034      	beq.n	80010f6 <HAL_TIM_ConfigClockSource+0xca>
 800108c:	d819      	bhi.n	80010c2 <HAL_TIM_ConfigClockSource+0x96>
 800108e:	2b50      	cmp	r3, #80	; 0x50
 8001090:	d1e8      	bne.n	8001064 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001092:	684a      	ldr	r2, [r1, #4]
 8001094:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001096:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001098:	6a05      	ldr	r5, [r0, #32]
 800109a:	f025 0501 	bic.w	r5, r5, #1
 800109e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80010a0:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80010a2:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80010a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80010aa:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80010ae:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80010b0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80010b2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80010b4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80010b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80010ba:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80010be:	6083      	str	r3, [r0, #8]
 80010c0:	e7d0      	b.n	8001064 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 80010c2:	2b70      	cmp	r3, #112	; 0x70
 80010c4:	d00c      	beq.n	80010e0 <HAL_TIM_ConfigClockSource+0xb4>
 80010c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010ca:	d1cb      	bne.n	8001064 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 80010cc:	68cb      	ldr	r3, [r1, #12]
 80010ce:	684a      	ldr	r2, [r1, #4]
 80010d0:	6889      	ldr	r1, [r1, #8]
 80010d2:	f7ff ffa1 	bl	8001018 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80010d6:	6822      	ldr	r2, [r4, #0]
 80010d8:	6893      	ldr	r3, [r2, #8]
 80010da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010de:	e008      	b.n	80010f2 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 80010e0:	68cb      	ldr	r3, [r1, #12]
 80010e2:	684a      	ldr	r2, [r1, #4]
 80010e4:	6889      	ldr	r1, [r1, #8]
 80010e6:	f7ff ff97 	bl	8001018 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80010ea:	6822      	ldr	r2, [r4, #0]
 80010ec:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80010ee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80010f2:	6093      	str	r3, [r2, #8]
      break;
 80010f4:	e7b6      	b.n	8001064 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80010f6:	684d      	ldr	r5, [r1, #4]
 80010f8:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80010fa:	6a01      	ldr	r1, [r0, #32]
 80010fc:	f021 0110 	bic.w	r1, r1, #16
 8001100:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001102:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001104:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001106:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800110a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800110e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001112:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001116:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001118:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800111a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800111c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001120:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001124:	e7cb      	b.n	80010be <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001126:	684a      	ldr	r2, [r1, #4]
 8001128:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800112a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800112c:	6a05      	ldr	r5, [r0, #32]
 800112e:	f025 0501 	bic.w	r5, r5, #1
 8001132:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001134:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001136:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800113a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800113e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001142:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001144:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001146:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001148:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800114a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800114e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8001152:	e7b4      	b.n	80010be <HAL_TIM_ConfigClockSource+0x92>

08001154 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001154:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001158:	2b01      	cmp	r3, #1
{
 800115a:	b530      	push	{r4, r5, lr}
 800115c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001160:	d035      	beq.n	80011ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001162:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001166:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001168:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 800116a:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 800116c:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 8001170:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001172:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 8001174:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001178:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800117a:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800117c:	4c15      	ldr	r4, [pc, #84]	; (80011d4 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 800117e:	42a3      	cmp	r3, r4
 8001180:	d01a      	beq.n	80011b8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001186:	d017      	beq.n	80011b8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001188:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 800118c:	42a3      	cmp	r3, r4
 800118e:	d013      	beq.n	80011b8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001190:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001194:	42a3      	cmp	r3, r4
 8001196:	d00f      	beq.n	80011b8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001198:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800119c:	42a3      	cmp	r3, r4
 800119e:	d00b      	beq.n	80011b8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80011a0:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 80011a4:	42a3      	cmp	r3, r4
 80011a6:	d007      	beq.n	80011b8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80011a8:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 80011ac:	42a3      	cmp	r3, r4
 80011ae:	d003      	beq.n	80011b8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80011b0:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80011b4:	42a3      	cmp	r3, r4
 80011b6:	d104      	bne.n	80011c2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80011b8:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80011ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80011be:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80011c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80011c2:	2301      	movs	r3, #1
 80011c4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80011c8:	2300      	movs	r3, #0
 80011ca:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80011ce:	4618      	mov	r0, r3

  return HAL_OK;
}
 80011d0:	bd30      	pop	{r4, r5, pc}
 80011d2:	bf00      	nop
 80011d4:	40010000 	.word	0x40010000

080011d8 <HAL_TIMEx_CommutCallback>:
 80011d8:	4770      	bx	lr

080011da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80011da:	4770      	bx	lr

080011dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80011dc:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80011de:	6803      	ldr	r3, [r0, #0]
 80011e0:	68c1      	ldr	r1, [r0, #12]
 80011e2:	691a      	ldr	r2, [r3, #16]
{
 80011e4:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80011e6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80011ea:	430a      	orrs	r2, r1
 80011ec:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80011ee:	6925      	ldr	r5, [r4, #16]
 80011f0:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 80011f2:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80011f4:	69c0      	ldr	r0, [r0, #28]
 80011f6:	432a      	orrs	r2, r5
 80011f8:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80011fa:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80011fe:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8001200:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001204:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8001206:	430a      	orrs	r2, r1
 8001208:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800120a:	695a      	ldr	r2, [r3, #20]
 800120c:	69a1      	ldr	r1, [r4, #24]
 800120e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001212:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001214:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001218:	615a      	str	r2, [r3, #20]
 800121a:	4a25      	ldr	r2, [pc, #148]	; (80012b0 <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800121c:	d129      	bne.n	8001272 <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800121e:	4293      	cmp	r3, r2
 8001220:	d003      	beq.n	800122a <UART_SetConfig+0x4e>
 8001222:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001226:	4293      	cmp	r3, r2
 8001228:	d120      	bne.n	800126c <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800122a:	f7ff fd81 	bl	8000d30 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800122e:	6862      	ldr	r2, [r4, #4]
 8001230:	6825      	ldr	r5, [r4, #0]
 8001232:	1892      	adds	r2, r2, r2
 8001234:	f04f 0300 	mov.w	r3, #0
 8001238:	f04f 0119 	mov.w	r1, #25
 800123c:	415b      	adcs	r3, r3
 800123e:	fba0 0101 	umull	r0, r1, r0, r1
 8001242:	f7fe ffc1 	bl	80001c8 <__aeabi_uldivmod>
 8001246:	2164      	movs	r1, #100	; 0x64
 8001248:	fbb0 f4f1 	udiv	r4, r0, r1
 800124c:	fb01 0314 	mls	r3, r1, r4, r0
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	3332      	adds	r3, #50	; 0x32
 8001254:	fbb3 f3f1 	udiv	r3, r3, r1
 8001258:	f003 0207 	and.w	r2, r3, #7
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8001262:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001266:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001268:	60ab      	str	r3, [r5, #8]
 800126a:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 800126c:	f7ff fd50 	bl	8000d10 <HAL_RCC_GetPCLK1Freq>
 8001270:	e7dd      	b.n	800122e <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001272:	4293      	cmp	r3, r2
 8001274:	d002      	beq.n	800127c <UART_SetConfig+0xa0>
 8001276:	4a0f      	ldr	r2, [pc, #60]	; (80012b4 <UART_SetConfig+0xd8>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d116      	bne.n	80012aa <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 800127c:	f7ff fd58 	bl	8000d30 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001280:	6863      	ldr	r3, [r4, #4]
 8001282:	6825      	ldr	r5, [r4, #0]
 8001284:	2119      	movs	r1, #25
 8001286:	009a      	lsls	r2, r3, #2
 8001288:	fba0 0101 	umull	r0, r1, r0, r1
 800128c:	0f9b      	lsrs	r3, r3, #30
 800128e:	f7fe ff9b 	bl	80001c8 <__aeabi_uldivmod>
 8001292:	2264      	movs	r2, #100	; 0x64
 8001294:	fbb0 f1f2 	udiv	r1, r0, r2
 8001298:	fb02 0311 	mls	r3, r2, r1, r0
 800129c:	011b      	lsls	r3, r3, #4
 800129e:	3332      	adds	r3, #50	; 0x32
 80012a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80012a4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80012a8:	e7de      	b.n	8001268 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 80012aa:	f7ff fd31 	bl	8000d10 <HAL_RCC_GetPCLK1Freq>
 80012ae:	e7e7      	b.n	8001280 <UART_SetConfig+0xa4>
 80012b0:	40011000 	.word	0x40011000
 80012b4:	40011400 	.word	0x40011400

080012b8 <HAL_UART_Init>:
{
 80012b8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80012ba:	4604      	mov	r4, r0
 80012bc:	b340      	cbz	r0, 8001310 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80012be:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80012c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80012c6:	b91b      	cbnz	r3, 80012d0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80012c8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80012cc:	f000 f9d6 	bl	800167c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80012d0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80012d2:	2324      	movs	r3, #36	; 0x24
 80012d4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80012d8:	68d3      	ldr	r3, [r2, #12]
 80012da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80012de:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80012e0:	4620      	mov	r0, r4
 80012e2:	f7ff ff7b 	bl	80011dc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80012e6:	6823      	ldr	r3, [r4, #0]
 80012e8:	691a      	ldr	r2, [r3, #16]
 80012ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80012ee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80012f0:	695a      	ldr	r2, [r3, #20]
 80012f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80012f6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80012f8:	68da      	ldr	r2, [r3, #12]
 80012fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80012fe:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001300:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001302:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001304:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001306:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800130a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800130e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001310:	2001      	movs	r0, #1
}
 8001312:	bd10      	pop	{r4, pc}

08001314 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001314:	b530      	push	{r4, r5, lr}
 8001316:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001318:	2230      	movs	r2, #48	; 0x30
 800131a:	2100      	movs	r1, #0
 800131c:	a808      	add	r0, sp, #32
 800131e:	f000 fa55 	bl	80017cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001322:	2100      	movs	r1, #0
 8001324:	2214      	movs	r2, #20
 8001326:	a803      	add	r0, sp, #12
 8001328:	f000 fa50 	bl	80017cc <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800132c:	2400      	movs	r4, #0
 800132e:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <SystemClock_Config+0x90>)
 8001330:	9401      	str	r4, [sp, #4]
 8001332:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001334:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001338:	641a      	str	r2, [r3, #64]	; 0x40
 800133a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001340:	9301      	str	r3, [sp, #4]
 8001342:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001344:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <SystemClock_Config+0x94>)
 8001346:	9402      	str	r4, [sp, #8]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001356:	9302      	str	r3, [sp, #8]
 8001358:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800135a:	2301      	movs	r3, #1
 800135c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800135e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001362:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001364:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001368:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800136a:	2308      	movs	r3, #8
 800136c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800136e:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001372:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001374:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001376:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001378:	2307      	movs	r3, #7
 800137a:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800137c:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800137e:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001380:	f7ff fa56 	bl	8000830 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001384:	230f      	movs	r3, #15
 8001386:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001388:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800138c:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800138e:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001394:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001396:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001398:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800139a:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800139c:	f7ff fc1c 	bl	8000bd8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80013a0:	b015      	add	sp, #84	; 0x54
 80013a2:	bd30      	pop	{r4, r5, pc}
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40007000 	.word	0x40007000

080013ac <main>:
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 80013b0:	f7ff f8b6 	bl	8000520 <HAL_Init>
  SystemClock_Config();
 80013b4:	f7ff ffae 	bl	8001314 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	2214      	movs	r2, #20
 80013ba:	2100      	movs	r1, #0
 80013bc:	a807      	add	r0, sp, #28

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013be:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f000 fa04 	bl	80017cc <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c4:	4b5e      	ldr	r3, [pc, #376]	; (8001540 <main+0x194>)
 80013c6:	9401      	str	r4, [sp, #4]
 80013c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80013ca:	485e      	ldr	r0, [pc, #376]	; (8001544 <main+0x198>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013cc:	f042 0204 	orr.w	r2, r2, #4
 80013d0:	631a      	str	r2, [r3, #48]	; 0x30
 80013d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013d4:	f002 0204 	and.w	r2, r2, #4
 80013d8:	9201      	str	r2, [sp, #4]
 80013da:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013dc:	9402      	str	r4, [sp, #8]
 80013de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013e4:	631a      	str	r2, [r3, #48]	; 0x30
 80013e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013e8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80013ec:	9202      	str	r2, [sp, #8]
 80013ee:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f0:	9403      	str	r4, [sp, #12]
 80013f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013f4:	f042 0201 	orr.w	r2, r2, #1
 80013f8:	631a      	str	r2, [r3, #48]	; 0x30
 80013fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013fc:	f002 0201 	and.w	r2, r2, #1
 8001400:	9203      	str	r2, [sp, #12]
 8001402:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001404:	9404      	str	r4, [sp, #16]
 8001406:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001408:	f042 0208 	orr.w	r2, r2, #8
 800140c:	631a      	str	r2, [r3, #48]	; 0x30
 800140e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001410:	f003 0308 	and.w	r3, r3, #8
 8001414:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001416:	4622      	mov	r2, r4
 8001418:	2110      	movs	r1, #16
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800141a:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 800141c:	f7ff f9f6 	bl	800080c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001420:	4622      	mov	r2, r4
 8001422:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001426:	4848      	ldr	r0, [pc, #288]	; (8001548 <main+0x19c>)
 8001428:	f7ff f9f0 	bl	800080c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800142c:	2610      	movs	r6, #16
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800142e:	4b47      	ldr	r3, [pc, #284]	; (800154c <main+0x1a0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001430:	4847      	ldr	r0, [pc, #284]	; (8001550 <main+0x1a4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001432:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001434:	a907      	add	r1, sp, #28

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001436:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001438:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143c:	f7ff f906 	bl	800064c <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001440:	a907      	add	r1, sp, #28
 8001442:	4840      	ldr	r0, [pc, #256]	; (8001544 <main+0x198>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001444:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001446:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800144c:	f7ff f8fe 	bl	800064c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001450:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001454:	a907      	add	r1, sp, #28
 8001456:	483c      	ldr	r0, [pc, #240]	; (8001548 <main+0x19c>)
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001458:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145a:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001460:	f7ff f8f4 	bl	800064c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001464:	4622      	mov	r2, r4
 8001466:	4621      	mov	r1, r4
 8001468:	200a      	movs	r0, #10
 800146a:	f7ff f897 	bl	800059c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800146e:	200a      	movs	r0, #10
  htim1.Instance = TIM1;
 8001470:	4d38      	ldr	r5, [pc, #224]	; (8001554 <main+0x1a8>)
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001472:	f7ff f8c7 	bl	8000604 <HAL_NVIC_EnableIRQ>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001476:	4632      	mov	r2, r6
 8001478:	4621      	mov	r1, r4
 800147a:	a807      	add	r0, sp, #28
 800147c:	f000 f9a6 	bl	80017cc <memset>
  htim1.Instance = TIM1;
 8001480:	4b35      	ldr	r3, [pc, #212]	; (8001558 <main+0x1ac>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001482:	60ac      	str	r4, [r5, #8]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001484:	4628      	mov	r0, r5
  htim1.Init.Prescaler = 0;
 8001486:	e885 0018 	stmia.w	r5, {r3, r4}
  htim1.Init.Period = 0;
 800148a:	60ec      	str	r4, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148c:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 800148e:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001490:	61ac      	str	r4, [r5, #24]
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001492:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001496:	9405      	str	r4, [sp, #20]
 8001498:	9406      	str	r4, [sp, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800149a:	f7ff fda3 	bl	8000fe4 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800149e:	a907      	add	r1, sp, #28
 80014a0:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a2:	9707      	str	r7, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014a4:	f7ff fdc2 	bl	800102c <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014a8:	a905      	add	r1, sp, #20
 80014aa:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ac:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ae:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014b0:	f7ff fe50 	bl	8001154 <HAL_TIMEx_MasterConfigSynchronization>
  hspi1.Instance = SPI1;
 80014b4:	4829      	ldr	r0, [pc, #164]	; (800155c <main+0x1b0>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014b6:	4a2a      	ldr	r2, [pc, #168]	; (8001560 <main+0x1b4>)
  htim2.Instance = TIM2;
 80014b8:	4d2a      	ldr	r5, [pc, #168]	; (8001564 <main+0x1b8>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014ba:	6084      	str	r4, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014bc:	f44f 7382 	mov.w	r3, #260	; 0x104
 80014c0:	e880 000c 	stmia.w	r0, {r2, r3}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014c8:	6183      	str	r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 80014ca:	230a      	movs	r3, #10
 80014cc:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014ce:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014d0:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014d2:	6144      	str	r4, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014d4:	61c4      	str	r4, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014d6:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014d8:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014da:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014dc:	f7ff fc38 	bl	8000d50 <HAL_SPI_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014e0:	4632      	mov	r2, r6
 80014e2:	4621      	mov	r1, r4
 80014e4:	a807      	add	r0, sp, #28
 80014e6:	f000 f971 	bl	80017cc <memset>
  htim2.Init.Prescaler = 83;
 80014ea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80014ee:	2353      	movs	r3, #83	; 0x53
 80014f0:	e885 000a 	stmia.w	r5, {r1, r3}
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014f4:	4628      	mov	r0, r5
  htim2.Init.Period = 9999;
 80014f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80014fa:	60eb      	str	r3, [r5, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fc:	60ac      	str	r4, [r5, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014fe:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001500:	61ac      	str	r4, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001502:	9405      	str	r4, [sp, #20]
 8001504:	9406      	str	r4, [sp, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001506:	f7ff fd6d 	bl	8000fe4 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800150a:	a907      	add	r1, sp, #28
 800150c:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800150e:	9707      	str	r7, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001510:	f7ff fd8c 	bl	800102c <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001514:	4628      	mov	r0, r5
 8001516:	a905      	add	r1, sp, #20
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001518:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151a:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800151c:	f7ff fe1a 	bl	8001154 <HAL_TIMEx_MasterConfigSynchronization>
  huart3.Instance = USART3;
 8001520:	4811      	ldr	r0, [pc, #68]	; (8001568 <main+0x1bc>)
  huart3.Init.BaudRate = 115200;
 8001522:	4b12      	ldr	r3, [pc, #72]	; (800156c <main+0x1c0>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001524:	6084      	str	r4, [r0, #8]
  huart3.Init.BaudRate = 115200;
 8001526:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
 800152a:	e880 0028 	stmia.w	r0, {r3, r5}
  huart3.Init.Mode = UART_MODE_TX_RX;
 800152e:	230c      	movs	r3, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001530:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001532:	6104      	str	r4, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001534:	6143      	str	r3, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001536:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001538:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800153a:	f7ff febd 	bl	80012b8 <HAL_UART_Init>
 800153e:	e7fe      	b.n	800153e <main+0x192>
 8001540:	40023800 	.word	0x40023800
 8001544:	40020800 	.word	0x40020800
 8001548:	40020c00 	.word	0x40020c00
 800154c:	10110000 	.word	0x10110000
 8001550:	40020000 	.word	0x40020000
 8001554:	2000006c 	.word	0x2000006c
 8001558:	40010000 	.word	0x40010000
 800155c:	200000ac 	.word	0x200000ac
 8001560:	40013000 	.word	0x40013000
 8001564:	20000104 	.word	0x20000104
 8001568:	2000002c 	.word	0x2000002c
 800156c:	40004800 	.word	0x40004800

08001570 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001570:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <HAL_MspInit+0x3c>)
 8001574:	2100      	movs	r1, #0
 8001576:	9100      	str	r1, [sp, #0]
 8001578:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800157a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800157e:	645a      	str	r2, [r3, #68]	; 0x44
 8001580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001582:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001586:	9200      	str	r2, [sp, #0]
 8001588:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800158a:	9101      	str	r1, [sp, #4]
 800158c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800158e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001592:	641a      	str	r2, [r3, #64]	; 0x40
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159a:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800159c:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 800159e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015a0:	f7fe ffea 	bl	8000578 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a4:	b003      	add	sp, #12
 80015a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800

080015b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015b0:	b510      	push	{r4, lr}
 80015b2:	4604      	mov	r4, r0
 80015b4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b6:	2214      	movs	r2, #20
 80015b8:	2100      	movs	r1, #0
 80015ba:	a803      	add	r0, sp, #12
 80015bc:	f000 f906 	bl	80017cc <memset>
  if(hspi->Instance==SPI1)
 80015c0:	6822      	ldr	r2, [r4, #0]
 80015c2:	4b14      	ldr	r3, [pc, #80]	; (8001614 <HAL_SPI_MspInit+0x64>)
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d122      	bne.n	800160e <HAL_SPI_MspInit+0x5e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015c8:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80015cc:	2100      	movs	r1, #0
 80015ce:	9101      	str	r1, [sp, #4]
 80015d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	4811      	ldr	r0, [pc, #68]	; (8001618 <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80015d8:	645a      	str	r2, [r3, #68]	; 0x44
 80015da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015dc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80015e0:	9201      	str	r2, [sp, #4]
 80015e2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e4:	9102      	str	r1, [sp, #8]
 80015e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015e8:	f042 0201 	orr.w	r2, r2, #1
 80015ec:	631a      	str	r2, [r3, #48]	; 0x30
 80015ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	9302      	str	r3, [sp, #8]
 80015f6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80015f8:	23e0      	movs	r3, #224	; 0xe0
 80015fa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	2302      	movs	r3, #2
 80015fe:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001600:	2303      	movs	r3, #3
 8001602:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001604:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001606:	2305      	movs	r3, #5
 8001608:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160a:	f7ff f81f 	bl	800064c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800160e:	b008      	add	sp, #32
 8001610:	bd10      	pop	{r4, pc}
 8001612:	bf00      	nop
 8001614:	40013000 	.word	0x40013000
 8001618:	40020000 	.word	0x40020000

0800161c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800161c:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM1)
 800161e:	6803      	ldr	r3, [r0, #0]
 8001620:	4a14      	ldr	r2, [pc, #80]	; (8001674 <HAL_TIM_Base_MspInit+0x58>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d10e      	bne.n	8001644 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	4b13      	ldr	r3, [pc, #76]	; (8001678 <HAL_TIM_Base_MspInit+0x5c>)
 800162c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800162e:	f042 0201 	orr.w	r2, r2, #1
 8001632:	645a      	str	r2, [r3, #68]	; 0x44
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800163e:	b003      	add	sp, #12
 8001640:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM2)
 8001644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001648:	d1f9      	bne.n	800163e <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800164a:	2200      	movs	r2, #0
 800164c:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8001650:	9201      	str	r2, [sp, #4]
 8001652:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001654:	f041 0101 	orr.w	r1, r1, #1
 8001658:	6419      	str	r1, [r3, #64]	; 0x40
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001662:	4611      	mov	r1, r2
 8001664:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001666:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001668:	f7fe ff98 	bl	800059c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800166c:	201c      	movs	r0, #28
 800166e:	f7fe ffc9 	bl	8000604 <HAL_NVIC_EnableIRQ>
}
 8001672:	e7e4      	b.n	800163e <HAL_TIM_Base_MspInit+0x22>
 8001674:	40010000 	.word	0x40010000
 8001678:	40023800 	.word	0x40023800

0800167c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800167c:	b510      	push	{r4, lr}
 800167e:	4604      	mov	r4, r0
 8001680:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001682:	2214      	movs	r2, #20
 8001684:	2100      	movs	r1, #0
 8001686:	a803      	add	r0, sp, #12
 8001688:	f000 f8a0 	bl	80017cc <memset>
  if(huart->Instance==USART3)
 800168c:	6822      	ldr	r2, [r4, #0]
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <HAL_UART_MspInit+0x68>)
 8001690:	429a      	cmp	r2, r3
 8001692:	d125      	bne.n	80016e0 <HAL_UART_MspInit+0x64>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001694:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8001698:	2100      	movs	r1, #0
 800169a:	9101      	str	r1, [sp, #4]
 800169c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800169e:	4812      	ldr	r0, [pc, #72]	; (80016e8 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80016a0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80016a4:	641a      	str	r2, [r3, #64]	; 0x40
 80016a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016a8:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80016ac:	9201      	str	r2, [sp, #4]
 80016ae:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b0:	9102      	str	r1, [sp, #8]
 80016b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016b4:	f042 0208 	orr.w	r2, r2, #8
 80016b8:	631a      	str	r2, [r3, #48]	; 0x30
 80016ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016bc:	f003 0308 	and.w	r3, r3, #8
 80016c0:	9302      	str	r3, [sp, #8]
 80016c2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016c8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ce:	2301      	movs	r3, #1
 80016d0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d2:	2303      	movs	r3, #3
 80016d4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016d6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016d8:	2307      	movs	r3, #7
 80016da:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016dc:	f7fe ffb6 	bl	800064c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016e0:	b008      	add	sp, #32
 80016e2:	bd10      	pop	{r4, pc}
 80016e4:	40004800 	.word	0x40004800
 80016e8:	40020c00 	.word	0x40020c00

080016ec <NMI_Handler>:
 80016ec:	4770      	bx	lr

080016ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ee:	e7fe      	b.n	80016ee <HardFault_Handler>

080016f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f0:	e7fe      	b.n	80016f0 <MemManage_Handler>

080016f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f2:	e7fe      	b.n	80016f2 <BusFault_Handler>

080016f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f4:	e7fe      	b.n	80016f4 <UsageFault_Handler>

080016f6 <SVC_Handler>:
 80016f6:	4770      	bx	lr

080016f8 <DebugMon_Handler>:
 80016f8:	4770      	bx	lr

080016fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016fa:	4770      	bx	lr

080016fc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016fc:	f7fe bf2a 	b.w	8000554 <HAL_IncTick>

08001700 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001700:	2010      	movs	r0, #16
 8001702:	f7ff b889 	b.w	8000818 <HAL_GPIO_EXTI_IRQHandler>
	...

08001708 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001708:	4801      	ldr	r0, [pc, #4]	; (8001710 <TIM2_IRQHandler+0x8>)
 800170a:	f7ff bb63 	b.w	8000dd4 <HAL_TIM_IRQHandler>
 800170e:	bf00      	nop
 8001710:	20000104 	.word	0x20000104

08001714 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001714:	4b05      	ldr	r3, [pc, #20]	; (800172c <SystemInit+0x18>)
 8001716:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800171a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800171e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001722:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001730:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001768 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001734:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001736:	e003      	b.n	8001740 <LoopCopyDataInit>

08001738 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001738:	4b0c      	ldr	r3, [pc, #48]	; (800176c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800173a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800173c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800173e:	3104      	adds	r1, #4

08001740 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001740:	480b      	ldr	r0, [pc, #44]	; (8001770 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001742:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001744:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001746:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001748:	d3f6      	bcc.n	8001738 <CopyDataInit>
  ldr  r2, =_sbss
 800174a:	4a0b      	ldr	r2, [pc, #44]	; (8001778 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800174c:	e002      	b.n	8001754 <LoopFillZerobss>

0800174e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800174e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001750:	f842 3b04 	str.w	r3, [r2], #4

08001754 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001754:	4b09      	ldr	r3, [pc, #36]	; (800177c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001756:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001758:	d3f9      	bcc.n	800174e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800175a:	f7ff ffdb 	bl	8001714 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800175e:	f000 f811 	bl	8001784 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001762:	f7ff fe23 	bl	80013ac <main>
  bx  lr    
 8001766:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001768:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800176c:	0800181c 	.word	0x0800181c
  ldr  r0, =_sdata
 8001770:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001774:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001778:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800177c:	20000144 	.word	0x20000144

08001780 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001780:	e7fe      	b.n	8001780 <ADC_IRQHandler>
	...

08001784 <__libc_init_array>:
 8001784:	b570      	push	{r4, r5, r6, lr}
 8001786:	4e0d      	ldr	r6, [pc, #52]	; (80017bc <__libc_init_array+0x38>)
 8001788:	4c0d      	ldr	r4, [pc, #52]	; (80017c0 <__libc_init_array+0x3c>)
 800178a:	1ba4      	subs	r4, r4, r6
 800178c:	10a4      	asrs	r4, r4, #2
 800178e:	2500      	movs	r5, #0
 8001790:	42a5      	cmp	r5, r4
 8001792:	d109      	bne.n	80017a8 <__libc_init_array+0x24>
 8001794:	4e0b      	ldr	r6, [pc, #44]	; (80017c4 <__libc_init_array+0x40>)
 8001796:	4c0c      	ldr	r4, [pc, #48]	; (80017c8 <__libc_init_array+0x44>)
 8001798:	f000 f820 	bl	80017dc <_init>
 800179c:	1ba4      	subs	r4, r4, r6
 800179e:	10a4      	asrs	r4, r4, #2
 80017a0:	2500      	movs	r5, #0
 80017a2:	42a5      	cmp	r5, r4
 80017a4:	d105      	bne.n	80017b2 <__libc_init_array+0x2e>
 80017a6:	bd70      	pop	{r4, r5, r6, pc}
 80017a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80017ac:	4798      	blx	r3
 80017ae:	3501      	adds	r5, #1
 80017b0:	e7ee      	b.n	8001790 <__libc_init_array+0xc>
 80017b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80017b6:	4798      	blx	r3
 80017b8:	3501      	adds	r5, #1
 80017ba:	e7f2      	b.n	80017a2 <__libc_init_array+0x1e>
 80017bc:	08001814 	.word	0x08001814
 80017c0:	08001814 	.word	0x08001814
 80017c4:	08001814 	.word	0x08001814
 80017c8:	08001818 	.word	0x08001818

080017cc <memset>:
 80017cc:	4402      	add	r2, r0
 80017ce:	4603      	mov	r3, r0
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d100      	bne.n	80017d6 <memset+0xa>
 80017d4:	4770      	bx	lr
 80017d6:	f803 1b01 	strb.w	r1, [r3], #1
 80017da:	e7f9      	b.n	80017d0 <memset+0x4>

080017dc <_init>:
 80017dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017de:	bf00      	nop
 80017e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017e2:	bc08      	pop	{r3}
 80017e4:	469e      	mov	lr, r3
 80017e6:	4770      	bx	lr

080017e8 <_fini>:
 80017e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ea:	bf00      	nop
 80017ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017ee:	bc08      	pop	{r3}
 80017f0:	469e      	mov	lr, r3
 80017f2:	4770      	bx	lr
